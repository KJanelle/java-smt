scripts/cpa.sh -heap 13000M -stack 50M -noout -benchmark -bmc -setprop cpa.predicate.useArraysForHeap=false -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -setprop cpa.loopbound.maxLoopIterations=1 -setprop cpa.predicate.encodeFloatAs=INTEGER -setprop cpa.predicate.encodeBitvectorAs=INTEGER -setprop solver.solver=princess -timelimit 900s -stats -spec test/programs/benchmarks/properties/unreach-call.prp -32 test/programs/benchmarks/product-lines/email_spec9_product31.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 13000M.
Running CPAchecker with Java stack of size 50M.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.3.1-svn-45350M / bmc (OpenJDK 64-Bit Server VM 17.0.8.1) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "test/programs/benchmarks/product-lines/email_spec9_product31.cil.c" (CPAchecker.parse, INFO)

line 63: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 89: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 112: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 150: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 171: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 208: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 245: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 284: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 323: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 360: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 397: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 434: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 471: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 508: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1069: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1115: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1160: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1189: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1237: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1284: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1329: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1407: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1476: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1610: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1693: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1740: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1787: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1832: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1895: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2002: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2056: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2128: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2175: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2396: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2428: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2437: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2446: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2471: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2979: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2999: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3008: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3023: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 906: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.getTargets, WARNING)

Using unsound approximation of ints with unbounded integers and floats with unbounded integers for encoding program semantics. (PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with Princess 2023-04-07. (PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with unbounded integers for encoding program semantics. (AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Creating formula for program (AbstractBMCAlgorithm.run, INFO)

Starting satisfiability check... (AbstractBMCAlgorithm.boundedModelCheck, INFO)

Starting assertions check... (AbstractBMCAlgorithm.checkBoundingAssertions, INFO)

Terminating because none of the following CPAs' precision can be adjusted any further  LoopBoundCPA (AbstractBMCAlgorithm.adjustConditions, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Analysis incomplete: no errors found, but not everything could be checked. (CPAchecker.analyzeResult, WARNING)


PredicateCPA statistics
-----------------------
Number of abstractions:            0 (0% of all post computations)
Number of strengthen sat checks:   0
Number of coverage checks:         20
  BDD entailment checks:           0
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       0
Avg ABE block size:                                0.00 (sum: 0, count: 0, min: 0, max: 0)
Number of predicates discovered:          0

Time for post operator:                                0.279s
  Time for path formula creation:                      0.275s
Time for strengthen operator:                          0.019s
Time for prec operator:                                0.008s
Time for merge operator:                               0.021s
Time for coverage checks:                              0.000s
Total time for SMT solver (w/o itp):     0.000s

Total number of created targets for pointer analysis: 0



KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

Bounds CPA statistics
---------------------
Bound k:                                           1
Maximum loop iteration reached:                    2


ValueAnalysisCPA statistics
---------------------------
Number of variables per state:                     111.37 (sum: 122841, count: 1103, min: 0, max: 162)
Number of global variables per state:              91.73 (sum: 101178, count: 1103, min: 0, max: 103)
Number of assumptions:                                  562
Number of deterministic assumptions:                      0
Level of Determinism:                              0%

ValueAnalysisPrecisionAdjustment statistics
-------------------------------------------
Number of abstraction computations:                    1112
Total time for liveness abstraction:                   0.000s
Total time for abstraction computation:                0.066s
Total time for path thresholds:                        0.000s

ConstraintsStrengthenOperator statistics
----------------------------------------
Total time for strengthening by ConstraintsCPA:     0.000s
Replaced symbolic expressions: 0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 1112, count: 1112, min: 1, max: 1) [1 x 1112]
Number of states with assumption transitions:      0

CPA algorithm statistics
------------------------
Number of iterations:            1103
Max size of waitlist:            3
Average size of waitlist:        1
LoopstackSortedWaitlist:                           0.09 (sum: 88, count: 1015, min: 0, max: 88)
ReversePostorderSortedWaitlist:                    0.00 (sum: 0, count: 1020, min: 0, max: 0)
LoopIterationSortedWaitlist:                       0.08 (sum: 83, count: 1015, min: 0, max: 83)
CallstackSortedWaitlist:                           88.00 (sum: 88, count: 1, min: 88, max: 88)
Number of computed successors:   1112
Max successors for one state:    2
Number of times merged:          10
Number of times stopped:         10
Number of times breaked:         0

Total time for CPA algorithm:         0.620s (Max:     0.620s)
  Time for choose from waitlist:      0.013s
  Time for precision adjustment:      0.123s
  Time for transfer relation:         0.420s
  Time for merge operator:            0.027s
  Time for stop operator:             0.005s
  Time for adding to reached set:     0.016s

BMC algorithm statistics
------------------------
Time for BMC formula creation:                       0.621s
Time for final sat check:                            0.198s
Time for bounding assertions check:                  2.087s

CPAchecker general statistics
-----------------------------
Number of program locations:                       1987
Number of CFA edges (per node):                        2246 (count: 1987, min: 0, max: 6, avg: 1.13)
Number of relevant variables:                      406
Number of functions:                               114
Number of loops (and loop nodes):                         4 (sum: 151, min: 15, max: 101, avg: 37.75)
Size of reached set:             1103
  Number of reached locations:   862 (43%)
    Avg states per location:     1
    Max states per location:     6 (at node N1323)
  Number of reached functions:   62 (54%)
  Number of partitions:          1103
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.715s
  Time for loading CPAs:          1.281s
  Time for loading parser:        0.231s
  Time for CFA construction:      1.144s
    Time for parsing file(s):     0.481s
    Time for AST to CFA:          0.367s
    Time for CFA sanity check:    0.001s
    Time for post-processing:     0.224s
    Time for loop structure:      0.014s
    Time for AST structure:       0.000s
      Time for function pointers resolving:            0.006s
        Function calls via function pointers:             1 (count: 1, min: 1, max: 1, avg: 1.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.155s
        Time for collecting variables:                 0.109s
        Time for solving dependencies:                 0.002s
        Time for building hierarchy:                   0.001s
        Time for building classification:              0.043s
        Time for exporting data:                       0.000s
Time for Analysis:                3.164s
CPU time for analysis:            5.390s
Time for analyzing result:        0.001s
Total time for CPAchecker:        5.879s
Total CPU time for CPAchecker:   10.690s
Time for statistics:              0.079s

Time for Garbage Collector:       0.080s (in 9 runs)
Garbage Collector(s) used:    G1 Old Generation, G1 Young Generation

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
